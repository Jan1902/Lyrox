using Lyrox.Framework.CodeGeneration.Shared;
using Lyrox.Framework.Core.Abstraction.Networking.Packet;
using System.Reflection;
using Autofac;
using Lyrox.Framework.Networking.Mojang.Data.Abstraction;

namespace Lyrox.Framework.Networking.Core;

public class PacketSerializer : IPacketSerializer
{
    private IEnumerable<FullPacketMapping> _mappings;

    public PacketSerializer(PacketTypeMapping packetTypeMapping)
        => SetupFullMappings(packetTypeMapping);

    private void SetupFullMappings(PacketTypeMapping packetTypeMapping)
    {
        var mappings = new List<FullPacketMapping>();

        foreach (var (id, packetType) in packetTypeMapping.GetAllPacketMappings())
        {
            if (packetType.GetCustomAttributes<AutoSerializedAttribute>(true).Any())
            {
                var serializationType = Type.GetType($"{packetType.Namespace}.{packetType.Name}_Serialization, {packetType.Assembly.FullName}")
                    ?? throw new Exception("Could not find autogenerated serialization logic");

                mappings.Add(new FullPacketMapping(packetType, id, serializationType));
            }
            else
            {
                var customAttribute = packetType.GetCustomAttributes(true).FirstOrDefault(a => a.GetType().IsClosedTypeOf(typeof(CustomSerializedAttribute<,>)))
                    ?? throw new Exception("Packet definition is missing AutoParsed or CustomParsed attribute");

                mappings.Add(new FullPacketMapping(packetType, id, customAttribute.GetType().GetGenericArguments().Last()));
            }
        }

        _mappings = mappings;
    }

    public object DeserializePacket(int packetId, IMojangBinaryReader reader)
    {
        var mapping = _mappings.FirstOrDefault(m => m.PacketID == packetId);

        var serializer = Activator.CreateInstance(mapping.SerializerType);
        var deserializeMethodInfo = typeof(IPacketSerializer<>).MakeGenericType(mapping.PacketType).GetMethod(nameof(IPacketSerializer<string>.Deserialize))!;

        var packet = deserializeMethodInfo.Invoke(serializer, new[] { reader })!;
        return packet;
    }

    public void SerializePacket(Type packetType, object packet, IMojangBinaryWriter writer)
    {
        var mapping = _mappings.FirstOrDefault(m => m.PacketType == packetType);

        var serializer = Activator.CreateInstance(mapping.SerializerType);
        var serializeMethodInfo = typeof(IPacketSerializer<>).MakeGenericType(packetType).GetMethod(nameof(IPacketSerializer<string>.Serialize))!;

        serializeMethodInfo.Invoke(serializer, new[] { writer });
    }

    private struct FullPacketMapping
    {
        public Type PacketType { get; set; }
        public int PacketID { get; set; }
        public Type SerializerType { get; set; }

        public FullPacketMapping(Type packetType, int packetID, Type handlerType)
        {
            PacketType = packetType;
            PacketID = packetID;
            SerializerType = handlerType;
        }
    }
}
